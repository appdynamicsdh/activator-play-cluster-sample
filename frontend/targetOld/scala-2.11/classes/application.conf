# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="Qjs1QF6LXAWUf3Tnw@87JqY<gsJbJ;q<S0jcInCcEj@iZ[EkPRZs2voAn]pKHgyE"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Akka
# ~~~~~

akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }
    
  cluster {
    seed-nodes = [
      "akka.tcp://application@127.0.0.1:2551",
      "akka.tcp://application@127.0.0.1:2552"]
    roles = [ frontend ]
    auto-down-unreachable-after = 10s
  }
}

# Cluster Actors
# ~~~~~~~~~~~~~~

# Factorial Service
# -----------------

akka.actor.deployment {
  /factorialService/factorialWorkerRouter = {
    # Router type provided by metrics extension.
    router = cluster-metrics-adaptive-group
    # router = adaptive-group
    # metrics-selector = heap
    # metrics-selector = load
    # metrics-selector = cpu
    metrics-selector = mix
    
    nr-of-instances = 100
    routees.paths = ["/user/factorialBackend"]
    cluster {
      enabled = on
      use-role = backend
      allow-local-routees = off
    }
  }
}

# disable legacy metrics in akka-cluster, since it is still enabled in akka-cluster by default
akka.cluster.metrics.enabled=off
akka.extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=INFO

kamon {
  jmx {
    subscriptions {
      histogram       = [ "**" ]
      min-max-counter = [ "**" ]
      gauge           = [ "**" ]
      counter         = [ "**" ]
      trace           = [ "**" ]
      trace-segment   = [ "**" ]
      akka-actor      = [ "**" ]
      akka-dispatcher = [ "**" ]
      akka-router     = [ "**" ]
      system-metric   = [ "**" ]
      http-server     = [ "**" ]
      # Here is the addition of the JMX exporting functionality to the subscriptions
      kamon-mxbeans   = [ "**" ]
    }
  
includes {
  actor = ["*"]
  trace = ["*"]
  dispatcher = ["*"]
}

simple-metric-key-generator {
  # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
  # this pattern:
  # application.host.entity.entity-name.metric-name
   application = "sense.fdi"
}
play {
  include-trace-token-header = true
  trace-token-header-name = "X-Trace-Token"
}

modules {
  kamon-statsd.auto-start = no
  kamon-log-reporter.auto-start = yes
  kamon-system-metrics.auto-start = no
  kamon-akka {
    auto-start = yes
    requires-aspectj = yes
    extension-id = "kamon.akka.Akka"
  }
}
}

kamon-mxbeans {
  mbeans = [
    { "name": "example-mbean", "jmxQuery": "example:type=myBean,name=*",
      "attributes": [
        { "name": "Counter1", "type": "counter" },
        { "name": "Counter2", "type": "counter" }
      ]
    }
  ],
  identify-delay-interval-ms = 1000,
  identify-interval-ms = 1000,
  value-check-interval-ms = 1000
}
kamon.metric.filters  {
  akka-actor = ["*"]
  akka-trace = ["*"]
  akka-dispatcher = ["*"]
}

}
